generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String
  position          String
  department        String
  phone             String?
  avatar            String?
  initials          String
  status            UserStatus         @default(WORKING)
  location          String?
  hireDate          DateTime
  birthday          DateTime?
  bio               String?
  managerId         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  announcements     Announcement[]
  announcementLikes AnnouncementLike[]
  comments          Comment[]
  commentLikes      CommentLike[]
  documents         Document[]         @relation("CreatedDocuments")
  education         Education[]
  events            Event[]            @relation("CreatedEvents")
  eventParticipants EventParticipant[]
  experience        Experience[]
  receivedMessages  Message[]          @relation("ReceivedMessages")
  sentMessages      Message[]          @relation("SentMessages")
  notifications     Notification[]
  projects          ProjectMember[]
  sessions          Session[]
  tasks             Task[]             @relation("AssignedTasks")
  createdTasks      Task[]             @relation("CreatedTasks")
  manager           User?              @relation("UserToManager", fields: [managerId], references: [id])
  subordinates      User[]             @relation("UserToManager")
  activity          UserActivity?
  skills            UserSkill[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String   @unique
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSkill {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Education {
  id          String   @id @default(cuid())
  degree      String
  institution String
  year        String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  position    String
  company     String
  period      String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus     @default(NEW)
  priority     TaskPriority   @default(LOW)
  networkType  NetworkType    @default(EMVS)
  dueDate      DateTime?
  assigneeId   String?
  creatorId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isArchived   Boolean        @default(false)
  taskNumber   Int?
  commentList  Comment[]
  Notification Notification[]
  assignee     User?          @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator      User           @relation("CreatedTasks", fields: [creatorId], references: [id], onDelete: Cascade)
  comments     TaskComment[]
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Document {
  id          String       @id @default(cuid())
  name        String
  type        DocumentType
  description String?
  url         String
  size        String
  creatorId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation("CreatedDocuments", fields: [creatorId], references: [id], onDelete: Cascade)
}

model Event {
  id           String             @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  startTime    String
  endTime      String
  location     String?
  type         EventType          @default(MEETING)
  creatorId    String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  creator      User               @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  participants EventParticipant[]
  Notification Notification[]
}

model EventParticipant {
  id        String            @id @default(cuid())
  eventId   String
  userId    String
  status    ParticipantStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  event     Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model Message {
  id           String              @id @default(cuid())
  content      String
  senderId     String
  receiverId   String
  read         Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  receiver     User                @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender       User                @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  attachments  MessageAttachment[]
  Notification Notification[]
}

model MessageAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  messageId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Announcement {
  id            String               @id @default(cuid())
  title         String
  content       String
  category      AnnouncementCategory @default(NEWS)
  authorId      String
  likes         Int                  @default(0)
  comments      Int                  @default(0)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  author        User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likesList     AnnouncementLike[]
  commentsList  Comment[]
  notifications Notification[]
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     ProjectMember[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Comment {
  id             String        @id @default(cuid())
  content        String
  authorId       String
  announcementId String?
  taskId         String?
  parentId       String?
  likesCount     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  author         User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent         Comment?      @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies        Comment[]     @relation("CommentToReplies")
  task           Task?         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  likes          CommentLike[]
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model AnnouncementLike {
  id             String       @id @default(cuid())
  userId         String
  announcementId String
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
}

model Notification {
  id             String           @id @default(cuid())
  type           NotificationType
  userId         String
  eventId        String?
  taskId         String?
  messageId      String?
  announcementId String?
  read           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  announcement   Announcement?    @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  event          Event?           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  message        Message?         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  task           Task?            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserStatus {
  WORKING
  ON_VACATION
  REMOTE
}

enum TaskStatus {
  NEW
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum NetworkType {
  EMVS
  INTERNET
  ASZI
}

enum DocumentType {
  DOC
  SPREADSHEET
  PRESENTATION
  IMAGE
  PDF
  OTHER
}

enum EventType {
  MEETING
  DEADLINE
  HOLIDAY
  VACATION
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum AnnouncementCategory {
  IMPORTANT
  NEWS
  EVENT
  UPDATE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum NotificationType {
  EVENT
  TASK
  MESSAGE
  ANNOUNCEMENT
}
