#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/export-import-data.js
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ DATABASE_URL –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const useLocalDb = process.argv.includes('--local-db');

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DATABASE_URL = process.env.DATABASE_URL;
const EXPORT_FILE = path.join(__dirname, '../data-export.json');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
if (process.argv[2] === 'export' && !DATABASE_URL) {
  console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

async function exportData() {
  console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã...');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º prisma+postgres:// –≤ prisma:// –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const prismaUrl = DATABASE_URL.replace('prisma+postgres://', 'prisma://');
  process.env.DATABASE_URL = prismaUrl;
  
  const { PrismaClient } = require('@prisma/client');
  const cloudPrisma = new PrismaClient();
  
  try {
    const data = {
      users: [],
      tasks: [],
      projects: [],
      announcements: [],
      events: [],
      documents: [],
      messages: [],
      notifications: [],
      comments: [],
      accounts: [],
      sessions: [],
      verificationTokens: [],
      userSkills: [],
      education: [],
      experience: [],
      projectMembers: [],
      eventParticipants: [],
      messageAttachments: [],
      commentLikes: [],
      announcementLikes: [],
      taskComments: [],
    };

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    data.users = await cloudPrisma.user.findMany({
      include: {
        skills: true,
        education: true,
        experience: true,
        projects: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á...');
    data.tasks = await cloudPrisma.task.findMany({
      include: {
        assignee: true,
        creator: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    data.projects = await cloudPrisma.project.findMany({
      include: {
        members: {
          include: {
            user: true,
          }
        }
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
    data.announcements = await cloudPrisma.announcement.findMany({
      include: {
        author: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π...');
    data.events = await cloudPrisma.event.findMany({
      include: {
        creator: true,
        participants: {
          include: {
            user: true,
          }
        }
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    data.documents = await cloudPrisma.document.findMany({
      include: {
        creator: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
    data.messages = await cloudPrisma.message.findMany({
      include: {
        sender: true,
        receiver: true,
        attachments: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    data.notifications = await cloudPrisma.notification.findMany({
      include: {
        user: true,
        event: true,
        task: true,
        message: true,
        announcement: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    data.comments = await cloudPrisma.comment.findMany({
      include: {
        author: true,
        replies: {
          include: {
            author: true,
          }
        }
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');
    data.accounts = await cloudPrisma.account.findMany();

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–π...');
    data.sessions = await cloudPrisma.session.findMany();

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    data.verificationTokens = await cloudPrisma.verificationToken.findMany();

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    data.userSkills = await cloudPrisma.userSkill.findMany({
      include: {
        user: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...');
    data.education = await cloudPrisma.education.findMany({
      include: {
        user: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã...');
    data.experience = await cloudPrisma.experience.findMany({
      include: {
        user: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    data.projectMembers = await cloudPrisma.projectMember.findMany({
      include: {
        user: true,
        project: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    data.eventParticipants = await cloudPrisma.eventParticipant.findMany({
      include: {
        user: true,
        event: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –≤–ª–æ–∂–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π...');
    data.messageAttachments = await cloudPrisma.messageAttachment.findMany({
      include: {
        message: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–∞–π–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    data.commentLikes = await cloudPrisma.commentLike.findMany({
      include: {
        user: true,
        comment: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–∞–π–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
    data.announcementLikes = await cloudPrisma.announcementLike.findMany({
      include: {
        user: true,
        announcement: true,
      }
    });

    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–∞–º...');
    data.taskComments = await cloudPrisma.taskComment.findMany({
      include: {
        task: true,
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    fs.writeFileSync(EXPORT_FILE, JSON.stringify(data, null, 2));
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${EXPORT_FILE}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    Object.entries(data).forEach(([table, records]) => {
      console.log(`  ${table}: ${records.length} –∑–∞–ø–∏—Å–µ–π`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await cloudPrisma.$disconnect();
  }
}

async function importData() {
  console.log('üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
  if (!fs.existsSync(EXPORT_FILE)) {
    console.error('‚ùå –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç.');
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π DATABASE_URL
  const originalDatabaseUrl = process.env.DATABASE_URL;
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
  if (useLocalDb) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
    console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  }
  
  const { PrismaClient } = require('@prisma/client');
  const localPrisma = new PrismaClient();
  
  try {
    const data = JSON.parse(fs.readFileSync(EXPORT_FILE, 'utf8'));
    
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã...');
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)
    await localPrisma.notification.deleteMany();
    await localPrisma.commentLike.deleteMany();
    await localPrisma.announcementLike.deleteMany();
    await localPrisma.taskComment.deleteMany();
    await localPrisma.comment.deleteMany();
    await localPrisma.messageAttachment.deleteMany();
    await localPrisma.message.deleteMany();
    await localPrisma.eventParticipant.deleteMany();
    await localPrisma.event.deleteMany();
    await localPrisma.document.deleteMany();
    await localPrisma.task.deleteMany();
    await localPrisma.projectMember.deleteMany();
    await localPrisma.project.deleteMany();
    await localPrisma.userSkill.deleteMany();
    await localPrisma.education.deleteMany();
    await localPrisma.experience.deleteMany();
    await localPrisma.announcement.deleteMany();
    await localPrisma.account.deleteMany();
    await localPrisma.session.deleteMany();
    await localPrisma.verificationToken.deleteMany();
    await localPrisma.user.deleteMany();

    console.log('üì• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const userMap = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID
    
    for (const user of data.users) {
      const { skills, education, experience, projects, ...userData } = user;
      const oldId = userData.id;
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏
      const cleanUserData = {
        ...userData,
        id: undefined, // –ü–æ–∑–≤–æ–ª—è–µ–º –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π ID
        managerId: undefined, // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        createdAt: undefined,
        updatedAt: undefined,
      };
      
      const createdUser = await localPrisma.user.create({
        data: cleanUserData
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID
      userMap.set(oldId, createdUser.id);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    console.log('üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...');
    for (const user of data.users) {
      if (user.managerId && userMap.has(user.managerId)) {
        const newUserId = userMap.get(user.id);
        const newManagerId = userMap.get(user.managerId);
        
        await localPrisma.user.update({
          where: { id: newUserId },
          data: { managerId: newManagerId }
        });
      }
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectMap = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID –ø—Ä–æ–µ–∫—Ç–æ–≤
    for (const project of data.projects) {
      const { members, ...projectData } = project;
      const cleanProjectData = {
        ...projectData,
        id: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };
      const createdProject = await localPrisma.project.create({
        data: cleanProjectData
      });
      projectMap.set(project.id, createdProject.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID –ø—Ä–æ–µ–∫—Ç–æ–≤
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
    const announcementMap = new Map();
    for (const announcement of data.announcements) {
      const { author, ...announcementData } = announcement;
      const cleanAnnouncementData = {
        ...announcementData,
        id: undefined,
        authorId: userMap.has(announcement.authorId) ? userMap.get(announcement.authorId) : undefined,
        createdAt: undefined,
        updatedAt: undefined,
        likes: undefined,
        comments: undefined,
      };
      const createdAnnouncement = await localPrisma.announcement.create({
        data: cleanAnnouncementData
      });
      announcementMap.set(announcement.id, createdAnnouncement.id);
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á...');
    const taskMap = new Map();
    for (const task of data.tasks) {
      const { assignee, creator, ...taskData } = task;
      const cleanTaskData = {
        ...taskData,
        id: undefined,
        assigneeId: userMap.has(task.assigneeId) ? userMap.get(task.assigneeId) : undefined,
        creatorId: userMap.has(task.creatorId) ? userMap.get(task.creatorId) : undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };
      const createdTask = await localPrisma.task.create({
        data: cleanTaskData
      });
      taskMap.set(task.id, createdTask.id);
    }

    // –ò–º–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π
    console.log('üì• –ò–º–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π...');
    const eventMap = new Map();
    for (const event of data.events) {
      const { participants, creator, ...eventData } = event;
      const cleanEventData = {
        ...eventData,
        id: undefined,
        creatorId: userMap.has(event.creatorId) ? userMap.get(event.creatorId) : undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };
      const createdEvent = await localPrisma.event.create({
        data: cleanEventData
      });
      eventMap.set(event.id, createdEvent.id);
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    for (const document of data.documents) {
      const { creator, ...documentData } = document;
      const cleanDocumentData = {
        ...documentData,
        id: undefined,
        creatorId: userMap.has(document.creatorId) ? userMap.get(document.creatorId) : undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };
      await localPrisma.document.create({
        data: cleanDocumentData
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
    for (const message of data.messages) {
      const { attachments, ...messageData } = message;
      const createdMessage = await localPrisma.message.create({
        data: messageData
      });
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
      for (const attachment of attachments) {
        await localPrisma.messageAttachment.create({
          data: {
            ...attachment,
            messageId: createdMessage.id,
          }
        });
      }
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    const createdCommentIds = new Map();
    let remaining = [...data.comments];
    let added;
    do {
      added = 0;
      const next = [];
      for (const comment of remaining) {
        const { replies, author, ...commentData } = comment;
        if (!userMap.has(comment.authorId)) continue;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ id –¥–ª—è announcementId –∏ taskId
        const newAnnouncementId = comment.announcementId ? announcementMap.get(comment.announcementId) : undefined;
        const newTaskId = comment.taskId ? taskMap.get(comment.taskId) : undefined;
        if (comment.announcementId && !newAnnouncementId) continue;
        if (comment.taskId && !newTaskId) continue;
        if (comment.parentId && !createdCommentIds.has(comment.parentId)) {
          next.push(comment);
          continue;
        }
        const cleanCommentData = {
          ...commentData,
          id: undefined,
          authorId: userMap.get(comment.authorId),
          parentId: comment.parentId ? createdCommentIds.get(comment.parentId) : undefined,
          announcementId: newAnnouncementId,
          taskId: newTaskId,
          createdAt: undefined,
          updatedAt: undefined,
          likesCount: undefined,
        };
        const createdComment = await localPrisma.comment.create({
          data: cleanCommentData
        });
        createdCommentIds.set(comment.id, createdComment.id);
        added++;
      }
      remaining = next;
    } while (added > 0 && remaining.length > 0);
    if (remaining.length > 0) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ ${remaining.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö parentId/authorId/announcementId/taskId`);
    }
    // replies –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ç.–∫. replies ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å parentId

    // –ò–º–ø–æ—Ä—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('üì• –ò–º–ø–æ—Ä—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const messageMap = new Map();
    for (const message of data.messages) {
      if (message.id) messageMap.set(message.id, message.id); // dummy, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    }
    for (const notification of data.notifications) {
      const { user, task, event, message, announcement, ...notificationData } = notification;
      const newUserId = userMap.get(notification.userId);
      const newTaskId = notification.taskId ? taskMap.get(notification.taskId) : undefined;
      const newAnnouncementId = notification.announcementId ? announcementMap.get(notification.announcementId) : undefined;
      // eventId –∏ messageId –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
      if (!newUserId) continue;
      if (notification.taskId && !newTaskId) continue;
      if (notification.announcementId && !newAnnouncementId) continue;
      const cleanNotificationData = {
        ...notificationData,
        id: undefined,
        userId: newUserId,
        taskId: newTaskId,
        announcementId: newAnnouncementId,
        createdAt: undefined,
        updatedAt: undefined,
      };
      await localPrisma.notification.create({
        data: cleanNotificationData
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (const user of data.users) {
      if (user.skills) {
        for (const skill of user.skills) {
          await localPrisma.userSkill.create({
            data: {
              ...skill,
              userId: user.id,
            }
          });
        }
      }
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...');
    for (const user of data.users) {
      if (user.education) {
        for (const edu of user.education) {
          if (!userMap.has(user.id)) continue;
          await localPrisma.education.create({
            data: {
              ...edu,
              id: undefined,
              userId: userMap.get(user.id),
              createdAt: undefined,
              updatedAt: undefined,
            }
          });
        }
      }
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã...');
    for (const user of data.users) {
      if (user.experience) {
        for (const exp of user.experience) {
          if (!userMap.has(user.id)) continue;
          await localPrisma.experience.create({
            data: {
              ...exp,
              id: undefined,
              userId: userMap.get(user.id),
              createdAt: undefined,
              updatedAt: undefined,
            }
          });
        }
      }
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');
    for (const account of data.accounts) {
      await localPrisma.account.create({
        data: account
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–π...');
    for (const session of data.sessions) {
      await localPrisma.session.create({
        data: session
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    for (const token of data.verificationTokens) {
      await localPrisma.verificationToken.create({
        data: token
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    for (const member of data.projectMembers) {
      const newUserId = userMap.get(member.userId);
      const newProjectId = projectMap ? projectMap.get(member.projectId) : undefined;
      if (!newUserId || !newProjectId) continue;
      await localPrisma.projectMember.create({
        data: {
          projectId: newProjectId,
          userId: newUserId,
          role: member.role,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    for (const participant of data.eventParticipants) {
      const newUserId = userMap.get(participant.userId);
      const newEventId = eventMap ? eventMap.get(participant.eventId) : undefined;
      if (!newUserId || !newEventId) continue;
      await localPrisma.eventParticipant.create({
        data: {
          eventId: newEventId,
          userId: newUserId,
          status: participant.status,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –≤–ª–æ–∂–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π...');
    for (const attachment of data.messageAttachments) {
      await localPrisma.messageAttachment.create({
        data: {
          name: attachment.name,
          url: attachment.url,
          type: attachment.type,
          messageId: attachment.messageId,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –ª–∞–π–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    for (const like of data.commentLikes) {
      const newUserId = userMap.get(like.userId);
      const newCommentId = createdCommentIds.get(like.commentId);
      if (!newUserId || !newCommentId) continue;
      await localPrisma.commentLike.create({
        data: {
          userId: newUserId,
          commentId: newCommentId,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –ª–∞–π–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
    for (const like of data.announcementLikes) {
      const newUserId = userMap.get(like.userId);
      const newAnnouncementId = announcementMap.get(like.announcementId);
      if (!newUserId || !newAnnouncementId) continue;
      await localPrisma.announcementLike.create({
        data: {
          userId: newUserId,
          announcementId: newAnnouncementId,
        }
      });
    }

    console.log('üì• –ò–º–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–∞–º...');
    for (const taskComment of data.taskComments) {
      await localPrisma.taskComment.create({
        data: {
          content: taskComment.content,
          taskId: taskComment.taskId,
        }
      });
    }

    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    const stats = await Promise.all([
      localPrisma.user.count(),
      localPrisma.task.count(),
      localPrisma.project.count(),
      localPrisma.announcement.count(),
      localPrisma.event.count(),
      localPrisma.document.count(),
      localPrisma.message.count(),
      localPrisma.notification.count(),
      localPrisma.comment.count(),
      localPrisma.account.count(),
      localPrisma.session.count(),
      localPrisma.verificationToken.count(),
      localPrisma.userSkill.count(),
      localPrisma.education.count(),
      localPrisma.experience.count(),
      localPrisma.projectMember.count(),
      localPrisma.eventParticipant.count(),
      localPrisma.messageAttachment.count(),
      localPrisma.commentLike.count(),
      localPrisma.announcementLike.count(),
      localPrisma.taskComment.count(),
    ]);
    
    const tables = [
      'users', 'tasks', 'projects', 'announcements', 'events', 'documents', 
      'messages', 'notifications', 'comments', 'accounts', 'sessions', 
      'verificationTokens', 'userSkills', 'education', 'experience', 
      'projectMembers', 'eventParticipants', 'messageAttachments', 
      'commentLikes', 'announcementLikes', 'taskComments'
    ];
    tables.forEach((table, index) => {
      console.log(`  ${table}: ${stats[index]} –∑–∞–ø–∏—Å–µ–π`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await localPrisma.$disconnect();
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π DATABASE_URL
    process.env.DATABASE_URL = originalDatabaseUrl;
  }
}

async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'export':
      await exportData();
      break;
    case 'import':
      await importData();
      break;
    case 'full':
      console.log('üîÑ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞...');
      await exportData();
      await importData();
      break;
    default:
      console.log(`
üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/export-import-data.js [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  export  - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã
  import  - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
  full    - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/export-import-data.js export
  node scripts/export-import-data.js import
  node scripts/export-import-data.js full
      `);
  }
}

main().catch(console.error); 